generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  storefront    Storefront?
  bio           String?
  profileImage  String?
  twitter       String?
  instagram     String?
  linkedin      String?
  clickEvents   ClickEvent[]
  emailAlerts   Boolean   @default(true)
  weeklyReport  Boolean   @default(true)
  monthlyReport Boolean   @default(true)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
}

model Storefront {
  id            String    @id @default(cuid())
  userId        String    @unique
  title         String
  description   String?
  domain        String?   @unique
  logoUrl       String?
  bannerUrl     String?
  themeId       String    @default("bubblegum-pop")
  primaryColor  String    @default("#FFFFFF")
  accentColor   String    @default("#000000")
  backgroundColor String  @default("#F9FAFB")
  textColor     String    @default("#111827")
  fontFamily    String    @default("sans-serif")
  layoutStyle   String    @default("grid")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      Product[]
  subscribers   Subscriber[]
}

model Product {
  id           String    @id @default(cuid())
  storefrontId String
  title        String
  description  String?
  price        Float
  imageUrl     String?
  affiliateUrl String
  clicks       Int       @default(0)
  order        Int       @default(0)
  featured     Boolean   @default(false)
  tags         String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  clickEvents  ClickEvent[]
}

model ClickEvent {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([productId, createdAt])
}

model Subscriber {
  id           String    @id @default(cuid())
  email        String    @unique
  storefrontId String
  createdAt    DateTime  @default(now())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
} 