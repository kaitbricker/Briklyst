generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  name          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified DateTime?
  image         String?
  bio           String?
  instagram     String?
  linkedin      String?
  profileImage  String?
  twitter       String?
  emailAlerts   Boolean      @default(true)
  monthlyReport Boolean      @default(true)
  weeklyReport  Boolean      @default(true)
  tiktok        String?
  youtube       String?
  accounts      Account[]
  clickEvents   ClickEvent[]
  sessions      Session[]
  storefront    Storefront?
  storefrontSettings StorefrontSettings?
  favorites     Product[]    @relation("Favorites")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
}

model Storefront {
  id              String       @id @default(cuid())
  userId          String       @unique
  title           String
  description     String?
  logoUrl         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  templateId      String       // Selected template (now required)
  templateOverrides Json?      // Color/font/layout overrides
  customSections  Json?        // Drag-and-drop blocks/sections
  brandingAssets  Json?        // Logo, banner, button styles, color palette
  customCSS       String?      // Custom CSS for advanced users
  savedTemplates  Json?        // User-saved templates
  socialLinks     Json?        // Array of {icon, url, order}
  collabHighlights Json?       // Array of collab highlight blocks
  subscriberBlock Json?        // Settings for signup block
  products        Product[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers     Subscriber[]
  collections     Collection[]
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storefrontId String
  storefront  Storefront @relation(fields: [storefrontId], references: [id])
  products    Product[]
  tags        String[]  @default([])
}

model Product {
  id           String       @id @default(cuid())
  storefrontId String
  title        String
  description  String?
  price        Float
  imageUrl     String?
  affiliateUrl String
  clicks       Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  order        Int          @default(0)
  featured     Boolean      @default(false)
  tags         String[]     @default([])
  collectionId String?
  imageUrls    String[]
  clickEvents  ClickEvent[]
  collection   Collection?  @relation(fields: [collectionId], references: [id])
  storefront   Storefront   @relation(fields: [storefrontId], references: [id])
  favoritedBy  User[]       @relation("Favorites")

  @@index([storefrontId])
  @@index([collectionId])
}

model ClickEvent {
  id        String   @id @default(cuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([productId, createdAt])
}

model Subscriber {
  id           String     @id @default(cuid())
  email        String     @unique
  storefrontId String
  createdAt    DateTime   @default(now())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model StorefrontSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branding      Json?
  layout        Json?
  typography    Json?
  sections      Json?
  customCSS     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
